# main.py | MIT License | 2025 | author: DimaLab
import asyncio
import logging
from datetime import datetime, time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

from bot import Config, PostGenerator, ChannelPublisher

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class TelegramChannelBot:
    def __init__(self):
        self.generator = PostGenerator()
        self.publisher = ChannelPublisher()
        self.scheduler = AsyncIOScheduler()
        self.timezone = pytz.timezone(Config.TIMEZONE)

    async def generate_and_publish_post(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç"""
        try:
            current_hour = datetime.now(self.timezone).hour
            post_type = self.generator.get_post_type_for_time(current_hour)

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —Ç–∏–ø–∞ '{post_type}' –≤ {current_hour}:00")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
            post_data = await self.generator.generate_post(post_type)

            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            success = await self.publisher.publish_post(post_data)

            if success:
                logger.info(f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {post_data['text'][:50]}...")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

    async def test_bot_setup(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞"""
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞...")

        if await self.publisher.test_connection():
            logger.info("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–∞–Ω–∞–ª–æ–º —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É")
            return False

        try:
            test_post = await self.generator.generate_post('motivation')
            logger.info(f"‚úì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_post['text'][:30]}...")
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return False

        return True

    async def publish_test_post(self):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç"""
        logger.info("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...")

        test_post_data = {
            'text': "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç –±–æ—Ç–∞ –∫–∞–Ω–∞–ª–∞ '–¢–∞–≤–µ—Ä–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n#dev #test",
            'image_url': None,
            'type': 'test'
        }

        success = await self.publisher.publish_post(test_post_data)
        if success:
            logger.info("‚úì –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç")

        return success

    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")

        for hour, minute in Config.POST_SCHEDULE:
            trigger = CronTrigger(
                hour=hour,
                minute=minute,
                second=0,
                timezone=self.timezone
            )

            self.scheduler.add_job(
                self.generate_and_publish_post,
                trigger=trigger,
                id=f'post_job_{hour}',
                name=f'–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ {hour}:00',
                misfire_grace_time=300
            )

            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {hour}:00")

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        try:
            Config.validate()
            logger.info("‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        except ValueError as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return

        if not await self.test_bot_setup():
            logger.error("‚úó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
            return

        self.setup_scheduler()

        self.scheduler.start()
        logger.info("‚úì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

        jobs = self.scheduler.get_jobs()
        logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(jobs)}")
        for job in jobs:
            logger.info(f"  - {job.name} (—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time})")

        logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        try:
            while True:
                await asyncio.sleep(60)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.stop()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("‚úì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        await self.publisher.close()
        logger.info("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    bot = TelegramChannelBot()

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É:
    # await bot.publish_test_post()  # –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    # await bot.generate_and_publish_post()  # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å

    await bot.start()


if __name__ == "__main__":
    asyncio.run(main())