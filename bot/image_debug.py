# debug_images.py - –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import asyncio
import logging
from bot import ImageGenerator, PostGenerator, ChannelPublisher, Config

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_image_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

    generator = ImageGenerator()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
    test_prompt = "A simple computer workspace with code on screen"
    print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")

    try:
        result = await generator.generate_image(test_prompt)

        if result is None:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: None - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return False
        else:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result)}")
            if isinstance(result, str):
                print(f"üìÑ URL: {result[:100]}...")
                return result
            else:
                print(f"üìÑ BufferedInputFile: {result.filename if hasattr(result, 'filename') else 'no filename'}")
                return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
        return False


async def test_post_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")

    generator = PostGenerator()

    try:
        post_data = await generator.generate_post('motivation')

        print(f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"  –¢–∏–ø: {post_data['type']}")
        print(f"  –¢–µ–∫—Å—Ç: {post_data['text'][:100]}...")
        print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {type(post_data['image_url']) if post_data['image_url'] else 'None'}")

        if post_data['image_url']:
            if isinstance(post_data['image_url'], str):
                print(f"  URL: {post_data['image_url'][:100]}...")
            else:
                print(f"  BufferedInputFile: {post_data['image_url']}")

        return post_data

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
        return None


async def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")

    publisher = ChannelPublisher()

    try:
        connection_ok = await publisher.test_connection()
        if connection_ok:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É")

        await publisher.close()
        return connection_ok

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
        return False


async def test_image_publishing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    publisher = ChannelPublisher()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    test_post = {
        'text': 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç –±–æ—Ç–∞\n\n#test #debug',
        'image_url': 'https://picsum.photos/1024/1024?random=1',  # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        'type': 'test'
    }

    try:
        success = await publisher.publish_post(test_post)
        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        await publisher.close()
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
        await publisher.close()
        return False


async def test_full_workflow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π workflow: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow...")

    generator = PostGenerator()
    publisher = ChannelPublisher()

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        post_data = await generator.generate_post('motivation')

        if not post_data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            return False

        print(f"‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {post_data['image_url'] is not None}")

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        success = await publisher.publish_post(post_data)

        if success:
            print("‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")

        await publisher.close()
        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ workflow: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞:")
        await publisher.close()
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        Config.validate()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"  IMAGE_MODEL: {Config.IMAGE_MODEL}")
        print(f"  IMAGE_SIZE: {Config.IMAGE_SIZE}")
        print(f"  IMAGE_QUALITY: {Config.IMAGE_QUALITY}")
        print(f"  CHANNEL_ID: {Config.CHANNEL_ID}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ —à–∞–≥–∞–º
    results = []

    # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_result = await test_image_generation()
    results.append(("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", image_result is not False))

    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
    post_result = await test_post_generation()
    results.append(("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞", post_result is not None))

    # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    connection_result = await test_telegram_connection()
    results.append(("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", connection_result))

    # 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if connection_result:
        image_pub_result = await test_image_publishing()
        results.append(("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", image_pub_result))

    # 5. –ü–æ–ª–Ω—ã–π workflow
    if all(r[1] for r in results):
        workflow_result = await test_full_workflow()
        results.append(("–ü–æ–ª–Ω—ã–π workflow", workflow_result))

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for test_name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {test_name}")

    if all(r[1] for r in results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    asyncio.run(main())